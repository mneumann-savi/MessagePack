:struct MessagePack.Encoder
  :let bytes Bytes'ref

  :new
    @bytes = Bytes.new

  :fun ref encode!(token MessagePack.Token): @
    case token.type == (
    | MessagePack.Token.Type.Nil         | @encode_nil!
    | MessagePack.Token.Type.Bool        | @encode_bool!(token.bool!)
    | MessagePack.Token.Type.UInt        | @encode_uint!(token._value)
    | MessagePack.Token.Type.Int         | @encode_int!(token._value.i64)
    | MessagePack.Token.Type.Float       | @encode_float!(F64.from_bits(token._value))
    | MessagePack.Token.Type.StringAhead | @encode_string_ahead!(token._value.u32)
    | MessagePack.Token.Type.BinaryAhead | @encode_binary_ahead!(token._value.u32)
    | MessagePack.Token.Type.ArrayAhead  | @encode_array_ahead!(token._value.u32)
    | MessagePack.Token.Type.MapAhead    | @encode_map_ahead!(token._value.u32)
    | MessagePack.Token.Type.ExtAhead    | pair = token.ext_ahead!
      @encode_ext_ahead!(pair.first, pair.second)
    |                                      error!
    )

  :fun ref encode_nil!
    @bytes.push(0xc0)
    @

  :fun ref encode_bool!(truth Bool)
    @bytes.push(if truth (0xc3 | 0xc2))
    @

  :fun ref encode_uint!(value U64)
    case (
    // positive fixint stores 7-bit positive integer
    // +--------+
    // |0XXXXXXX|
    // +--------+
    | value <= 127 |
      @bytes.push(value.u8)

    // uint 8 stores a 8-bit unsigned integer
    // +--------+--------+
    // |  0xcc  |ZZZZZZZZ|
    // +--------+--------+
    | value <= 0xFF |
      @bytes.push(0xcc).push(value.u8)

    // uint 16 stores a 16-bit big-endian unsigned integer
    // +--------+--------+--------+
    // |  0xcd  |ZZZZZZZZ|ZZZZZZZZ|
    // +--------+--------+--------+
    | value <= 0xFFFF |
      @bytes.push(0xcd).push_native_u16(value.u16.native_to_be)

    // uint 32 stores a 32-bit big-endian unsigned integer
    // +--------+--------+--------+--------+--------+
    // |  0xce  |ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|
    // +--------+--------+--------+--------+--------+
    | value <= 0xFFFF_FFFF |
      @bytes.push(0xce).push_native_u32(value.u32.native_to_be)

    // uint 64 stores a 64-bit big-endian unsigned integer
    // +--------+--------+--------+--------+--------+--------+--------+--------+--------+
    // |  0xcf  |ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|
    // +--------+--------+--------+--------+--------+--------+--------+--------+--------+
    |
      @bytes.push(0xcf).push_native_u64(value.native_to_be)
    )

    @

  :fun ref encode_int!(value I64)
    case (
    // negative fixint stores 5-bit negative integer
    // +--------+
    // |111YYYYY|
    // +--------+
    | value <= -1 && value >= -32 |
      @bytes.push(value.i8.u8)

    // int 8 stores a 8-bit signed integer
    // +--------+--------+
    // |  0xd0  |ZZZZZZZZ|
    // +--------+--------+
    | value >= I8.min_value.i64 && value <= I8.max_value.i64 | 
      @bytes.push(0xd0).push(value.i8.u8)

    // int 16 stores a 16-bit big-endian signed integer
    // +--------+--------+--------+
    // |  0xd1  |ZZZZZZZZ|ZZZZZZZZ|
    // +--------+--------+--------+
    | value >= I16.min_value.i64 && value <= I16.max_value.i64 | 
      @bytes.push(0xd1).push_native_u16(value.i16.u16.native_to_be)

    // int 32 stores a 32-bit big-endian signed integer
    // +--------+--------+--------+--------+--------+
    // |  0xd2  |ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|
    // +--------+--------+--------+--------+--------+
    | value >= I32.min_value.i64 && value <= I32.max_value.i64 | 
      @bytes.push(0xd2).push_native_u32(value.i32.u32.native_to_be)

    // int 64 stores a 64-bit big-endian signed integer
    // +--------+--------+--------+--------+--------+--------+--------+--------+--------+
    // |  0xd3  |ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|
    // +--------+--------+--------+--------+--------+--------+--------+--------+--------+
    | 
      @bytes.push(0xd3).push_native_u64(value.u64.native_to_be)
    )

    @

  :fun ref encode_float!(value F64)
    error!
    @

  :fun ref encode_string_ahead!(len U32)
    error!
    @

  :fun ref encode_binary_ahead!(len U32)
    error!
    @

  :fun ref encode_array_ahead!(len U32)
    error!
    @

  :fun ref encode_map_ahead!(len U32)
    error!
    @

  :fun ref encode_ext_ahead!(type I8, len U32)
    error!
    @
