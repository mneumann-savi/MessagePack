// Comments taken from the official spec:
// https://github.com/msgpack/msgpack/blob/master/spec.md

:module MessagePack.Token.Decoder
  :fun decode!(bytes Bytes, pos USize) MessagePack.Token
    b = bytes.byte_at!(pos)

    case (
    // +--------+
    // |  0xc0  |
    // +--------+
    | b == 0xc0 |
      MessagePack.Token.nil.sized(1)

    // +--------+
    // |  0xc2  |
    // +--------+
    | b == 0xc2 |
      MessagePack.Token.bool(False).sized(1)

    // +--------+
    // |  0xc3  |
    // +--------+
    | b == 0xc3 |
      MessagePack.Token.bool(True).sized(1)

    // positive fixint stores 7-bit positive integer
    // +--------+
    // |0XXXXXXX|
    // +--------+
    | b <= U8[0b0_1111111] |
      uint = b.u64
      MessagePack.Token.uint(uint).sized(1)

    // uint 8 stores a 8-bit unsigned integer
    // +--------+--------+
    // |  0xcc  |ZZZZZZZZ|
    // +--------+--------+
    | b == 0xcc |
      uint = bytes.read_byte!(pos + 1).u64
      MessagePack.Token.uint(uint).sized(2)

    // uint 16 stores a 16-bit big-endian unsigned integer
    // +--------+--------+--------+
    // |  0xcd  |ZZZZZZZZ|ZZZZZZZZ|
    // +--------+--------+--------+
    | b == 0xcd |
      uint = bytes.read_native_u16!(pos + 1).be_to_native.u64
      MessagePack.Token.uint(uint).sized(3)

    // uint 32 stores a 32-bit big-endian unsigned integer
    // +--------+--------+--------+--------+--------+
    // |  0xce  |ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|
    // +--------+--------+--------+--------+--------+
    | b == 0xce |
      uint = bytes.read_native_u32!(pos + 1).be_to_native.u64
      MessagePack.Token.uint(uint).sized(5)

    // uint 64 stores a 64-bit big-endian unsigned integer
    // +--------+--------+--------+--------+--------+--------+--------+--------+--------+
    // |  0xcf  |ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|
    // +--------+--------+--------+--------+--------+--------+--------+--------+--------+
    | b == 0xcf |
      uint = bytes.read_native_u64!(pos + 1).be_to_native.u64
      MessagePack.Token.uint(uint).sized(9)

    // negative fixint stores 5-bit negative integer
    // +--------+
    // |111YYYYY|
    // +--------+
    | b >= U8[0b111_00000] && b <= U8[0b111_11111] |
      int = b.i8.i64
      MessagePack.Token.int(int).sized(1)

    // int 8 stores a 8-bit signed integer
    // +--------+--------+
    // |  0xd0  |ZZZZZZZZ|
    // +--------+--------+
    | b == 0xd0 |
      int = bytes.read_byte!(pos + 1).i8.i64
      MessagePack.Token.int(int).sized(2)

    // int 16 stores a 16-bit big-endian signed integer
    // +--------+--------+--------+
    // |  0xd1  |ZZZZZZZZ|ZZZZZZZZ|
    // +--------+--------+--------+
    | b == 0xd1 |
      int = bytes.read_native_u16!(pos + 1).be_to_native.i16.i64
      MessagePack.Token.int(int).sized(3)

    // int 32 stores a 32-bit big-endian signed integer
    // +--------+--------+--------+--------+--------+
    // |  0xd2  |ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|
    // +--------+--------+--------+--------+--------+
    | b == 0xd2 |
      int = bytes.read_native_u32!(pos + 1).be_to_native.i32.i64
      MessagePack.Token.int(int).sized(5)

    // int 64 stores a 64-bit big-endian signed integer
    // +--------+--------+--------+--------+--------+--------+--------+--------+--------+
    // |  0xd3
    // |ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|
    // +--------+--------+--------+--------+--------+--------+--------+--------+--------+
    | b == 0xd3 |
      int = bytes.read_native_u64!(pos + 1).be_to_native.i64
      MessagePack.Token.int(int).sized(9)

    // float 32 stores a floating point number in IEEE 754 single precision
    // floating point number format:
    // +--------+--------+--------+--------+--------+
    // |  0xca  |XXXXXXXX|XXXXXXXX|XXXXXXXX|XXXXXXXX|
    // +--------+--------+--------+--------+--------+
    | b == 0xca |
      float = F32.from_bits(bytes.read_native_u32!(pos + 1).be_to_native).f64!
      MessagePack.Token.float(float).sized(5)

    // float 64 stores a floating point number in IEEE 754 double precision floating
    // point number format:
    // +--------+--------+--------+--------+--------+--------+--------+--------+--------+
    // |  0xcb  |YYYYYYYY|YYYYYYYY|YYYYYYYY|YYYYYYYY|YYYYYYYY|YYYYYYYY|YYYYYYYY|YYYYYYYY|
    // +--------+--------+--------+--------+--------+--------+--------+--------+--------+
    | b == 0xcb |
      float = F64.from_bits(bytes.read_native_u64!(pos + 1).be_to_native)
      MessagePack.Token.float(float).sized(9)

    // fixstr stores a byte array whose length is upto 31 bytes:
    // +--------+========+
    // |101XXXXX|  data  |
    // +--------+========+
    | b >= U8[0b101_00000] && b <= U8[0b101_11111] |
      len = b.bit_and(0b00011111).u32
      MessagePack.Token.string_ahead(len).sized(1)

    // str 8 stores a byte array whose length is upto (2^8)-1 bytes:
    // +--------+--------+========+
    // |  0xd9  |YYYYYYYY|  data  |
    // +--------+--------+========+
    | b == 0xd9 |
      len = bytes.read_byte!(pos + 1).u32
      MessagePack.Token.string_ahead(len).sized(2)

    // str 16 stores a byte array whose length is upto (2^16)-1 bytes:
    // +--------+--------+--------+========+
    // |  0xda  |ZZZZZZZZ|ZZZZZZZZ|  data  |
    // +--------+--------+--------+========+
    | b == 0xda |
      len = bytes.read_native_u16!(pos + 1).be_to_native.u32
      MessagePack.Token.string_ahead(len).sized(3)

    // str 32 stores a byte array whose length is upto (2^32)-1 bytes:
    // +--------+--------+--------+--------+--------+========+
    // |  0xdb  |AAAAAAAA|AAAAAAAA|AAAAAAAA|AAAAAAAA|  data  |
    // +--------+--------+--------+--------+--------+========+
    | b == 0xdb |
      len = bytes.read_native_u32!(pos + 1).be_to_native
      MessagePack.Token.string_ahead(len).sized(5)

    // bin 8 stores a byte array whose length is upto (2^8)-1 bytes:
    // +--------+--------+========+
    // |  0xc4  |XXXXXXXX|  data  |
    // +--------+--------+========+
    | b == 0xc4 |
      len = bytes.read_byte!(pos + 1).u32
      MessagePack.Token.binary_ahead(len).sized(2)

    // bin 16 stores a byte array whose length is upto (2^16)-1 bytes:
    // +--------+--------+--------+========+
    // |  0xc5  |YYYYYYYY|YYYYYYYY|  data  |
    // +--------+--------+--------+========+
    | b == 0xc5 |
      len = bytes.read_native_u16!(pos + 1).be_to_native.u32
      MessagePack.Token.binary_ahead(len).sized(3)

    // bin 32 stores a byte array whose length is upto (2^32)-1 bytes:
    // +--------+--------+--------+--------+--------+========+
    // |  0xc6  |ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|  data  |
    // +--------+--------+--------+--------+--------+========+
    | b == 0xc6 |
      len = bytes.read_native_u32!(pos + 1).be_to_native.u32
      MessagePack.Token.binary_ahead(len).sized(5)

    // fixarray stores an array whose length is upto 15 elements:
    // +--------+~~~~~~~~~~~~~~~~~+
    // |1001XXXX|    N objects    |
    // +--------+~~~~~~~~~~~~~~~~~+
    | b >= U8[0b1001_0000] && b <= U8[0b1001_1111] |
      len = b.bit_and(0b0000_1111).u32
      MessagePack.Token.array_ahead(len).sized(1)

    // array 16 stores an array whose length is upto (2^16)-1 elements:
    // +--------+--------+--------+~~~~~~~~~~~~~~~~~+
    // |  0xdc  |YYYYYYYY|YYYYYYYY|    N objects    |
    // +--------+--------+--------+~~~~~~~~~~~~~~~~~+
    | b == 0xdc |
      len = bytes.read_native_u16!(pos + 1).be_to_native.u32
      MessagePack.Token.array_ahead(len).sized(3)

    // array 32 stores an array whose length is upto (2^32)-1 elements:
    // +--------+--------+--------+--------+--------+~~~~~~~~~~~~~~~~~+
    // |  0xdd  |ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|    N objects    |
    // +--------+--------+--------+--------+--------+~~~~~~~~~~~~~~~~~+
    | b == 0xdd |
      len = bytes.read_native_u32!(pos + 1).be_to_native
      MessagePack.Token.array_ahead(len).sized(5)

    // fixmap stores a map whose length is upto 15 elements
    // +--------+~~~~~~~~~~~~~~~~~+
    // |1000XXXX|   N*2 objects   |
    // +--------+~~~~~~~~~~~~~~~~~+
    | b >= U8[0b1000_0000] && b <= U8[0b1000_1111] |
      len = b.bit_and(0b0000_1111).u32
      MessagePack.Token.map_ahead(len).sized(1)

    // map 16 stores a map whose length is upto (2^16)-1 elements
    // +--------+--------+--------+~~~~~~~~~~~~~~~~~+
    // |  0xde  |YYYYYYYY|YYYYYYYY|   N*2 objects   |
    // +--------+--------+--------+~~~~~~~~~~~~~~~~~+
    | b == 0xde |
      len = bytes.read_native_u16!(pos + 1).be_to_native.u32
      MessagePack.Token.map_ahead(len).sized(3)

    // map 32 stores a map whose length is upto (2^32)-1 elements
    // +--------+--------+--------+--------+--------+~~~~~~~~~~~~~~~~~+
    // |  0xdf  |ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|   N*2 objects   |
    // +--------+--------+--------+--------+--------+~~~~~~~~~~~~~~~~~+
    | b == 0xdf |
      len = bytes.read_native_u32!(pos + 1).be_to_native
      MessagePack.Token.map_ahead(len).sized(5)

    // fixext 1 stores an integer and a byte array whose length is 1 byte
    // +--------+--------+--------+
    // |  0xd4  |  type  |  data  |
    // +--------+--------+--------+
    | b == 0xd4 |
      type = bytes.read_byte!(pos + 1).i8
      MessagePack.Token.ext_ahead(type, 1).sized(2)

    // fixext 2 stores an integer and a byte array whose length is 2 bytes
    // +--------+--------+--------+--------+
    // |  0xd5  |  type  |       data      |
    // +--------+--------+--------+--------+
    | b == 0xd5 |
      type = bytes.read_byte!(pos + 1).i8
      MessagePack.Token.ext_ahead(type, 2).sized(2)

    // fixext 4 stores an integer and a byte array whose length is 4 bytes
    // +--------+--------+--------+--------+--------+--------+
    // |  0xd6  |  type  |                data               |
    // +--------+--------+--------+--------+--------+--------+
    | b == 0xd6 |
      type = bytes.read_byte!(pos + 1).i8
      MessagePack.Token.ext_ahead(type, 4).sized(2)

    // fixext 8 stores an integer and a byte array whose length is 8 bytes
    // +--------+--------+--------+--------+--------+--------+--------+--------+--------+--------+
    // |  0xd7  |  type  |                                  data                                 |
    // +--------+--------+--------+--------+--------+--------+--------+--------+--------+--------+
    | b == 0xd7 |
      type = bytes.read_byte!(pos + 1).i8
      MessagePack.Token.ext_ahead(type, 8).sized(2)

    // fixext 16 stores an integer and a byte array whose length is 16 bytes
    // +--------+--------+--------+--------+--------+--------+--------+--------+--------+--------+
    // |  0xd8  |  type  |                                  data                                ..
    // +--------+--------+--------+--------+--------+--------+--------+--------+--------+--------+
    // +--------+--------+--------+--------+--------+--------+--------+--------+
    // ..                            data (cont.)                              |
    // +--------+--------+--------+--------+--------+--------+--------+--------+
    | b == 0xd8 |
      type = bytes.read_byte!(pos + 1).i8
      MessagePack.Token.ext_ahead(type, 16).sized(2)

    // ext 8 stores an integer and a byte array whose length is upto (2^8)-1 bytes:
    // +--------+--------+--------+========+
    // |  0xc7  |XXXXXXXX|  type  |  data  |
    // +--------+--------+--------+========+
    | b == 0xc7 |
      len = bytes.read_byte!(pos + 1).u32
      type = bytes.read_byte!(pos + 2).i8
      MessagePack.Token.ext_ahead(type, len).sized(3)

    // ext 16 stores an integer and a byte array whose length is upto (2^16)-1 bytes:
    // +--------+--------+--------+--------+========+
    // |  0xc8  |YYYYYYYY|YYYYYYYY|  type  |  data  |
    // +--------+--------+--------+--------+========+
    | b == 0xc8 |
      len = bytes.read_native_u16!(pos + 1).be_to_native.u32
      type = bytes.read_byte!(pos + 3).i8
      MessagePack.Token.ext_ahead(type, len).sized(4)

    // ext 32 stores an integer and a byte array whose length is upto (2^32)-1 bytes:
    // +--------+--------+--------+--------+--------+--------+========+
    // |  0xc9  |ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|  type  |  data  |
    // +--------+--------+--------+--------+--------+--------+========+
    | b == 0xc9 |
      len = bytes.read_native_u32!(pos + 1).be_to_native
      type = bytes.read_byte!(pos + 5).i8
      MessagePack.Token.ext_ahead(type, len).sized(6)

    | error!
    )


