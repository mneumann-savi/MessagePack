:class MessagePack.Reader.Spec
  :is Spec
  :const describes: "MessagePack.Reader"

  :it "reads nil (1)"
    data = b"\xc0"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_nil! <: None

  :it "reads bool (1)"
    data = b"\xc2"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_bool! == False

  :it "reads bool (2)"
    data = b"\xc3"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_bool! == True

  :it "reads binary (1)"
    data = b"\xc4\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_binary! == b""

  :it "reads binary (2)"
    data = b"\xc5\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_binary! == b""

  :it "reads binary (3)"
    data = b"\xc6\x00\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_binary! == b""

  :it "reads binary (4)"
    data = b"\xc4\x01\x01"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_binary! == b"\x01"

  :it "reads binary (5)"
    data = b"\xc5\x00\x01\x01"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_binary! == b"\x01"

  :it "reads binary (6)"
    data = b"\xc6\x00\x00\x00\x01\x01"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_binary! == b"\x01"

  :it "reads binary (7)"
    data = b"\xc4\x02\x00\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_binary! == b"\x00\xff"

  :it "reads binary (8)"
    data = b"\xc5\x00\x02\x00\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_binary! == b"\x00\xff"

  :it "reads binary (9)"
    data = b"\xc6\x00\x00\x00\x02\x00\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_binary! == b"\x00\xff"

  :it "reads number positive (1)"
    data = b"\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[0]

  :it "reads number positive (2)"
    data = b"\xcc\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[0]

  :it "reads number positive (3)"
    data = b"\xcd\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[0]

  :it "reads number positive (4)"
    data = b"\xce\x00\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[0]

  :it "reads number positive (5)"
    data = b"\xcf\x00\x00\x00\x00\x00\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[0]

  :it "reads number positive (6)"
    data = b"\xd0\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[0]

  :it "reads number positive (7)"
    data = b"\xd1\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[0]

  :it "reads number positive (8)"
    data = b"\xd2\x00\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[0]

  :it "reads number positive (9)"
    data = b"\xd3\x00\x00\x00\x00\x00\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[0]

  :it "reads number positive (10)"
    data = b"\xca\x00\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[0]

  :it "reads number positive (11)"
    data = b"\xcb\x00\x00\x00\x00\x00\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[0]

  :it "reads number positive (12)"
    data = b"\x01"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[1]

  :it "reads number positive (13)"
    data = b"\xcc\x01"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[1]

  :it "reads number positive (14)"
    data = b"\xcd\x00\x01"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[1]

  :it "reads number positive (15)"
    data = b"\xce\x00\x00\x00\x01"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[1]

  :it "reads number positive (16)"
    data = b"\xcf\x00\x00\x00\x00\x00\x00\x00\x01"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[1]

  :it "reads number positive (17)"
    data = b"\xd0\x01"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[1]

  :it "reads number positive (18)"
    data = b"\xd1\x00\x01"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[1]

  :it "reads number positive (19)"
    data = b"\xd2\x00\x00\x00\x01"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[1]

  :it "reads number positive (20)"
    data = b"\xd3\x00\x00\x00\x00\x00\x00\x00\x01"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[1]

  :it "reads number positive (21)"
    data = b"\xca\x3f\x80\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[1]

  :it "reads number positive (22)"
    data = b"\xcb\x3f\xf0\x00\x00\x00\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[1]

  :it "reads number positive (23)"
    data = b"\x7f"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[127]

  :it "reads number positive (24)"
    data = b"\xcc\x7f"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[127]

  :it "reads number positive (25)"
    data = b"\xcd\x00\x7f"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[127]

  :it "reads number positive (26)"
    data = b"\xce\x00\x00\x00\x7f"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[127]

  :it "reads number positive (27)"
    data = b"\xcf\x00\x00\x00\x00\x00\x00\x00\x7f"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[127]

  :it "reads number positive (28)"
    data = b"\xd0\x7f"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[127]

  :it "reads number positive (29)"
    data = b"\xd1\x00\x7f"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[127]

  :it "reads number positive (30)"
    data = b"\xd2\x00\x00\x00\x7f"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[127]

  :it "reads number positive (31)"
    data = b"\xd3\x00\x00\x00\x00\x00\x00\x00\x7f"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[127]

  :it "reads number positive (32)"
    data = b"\xcc\x80"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[128]

  :it "reads number positive (33)"
    data = b"\xcd\x00\x80"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[128]

  :it "reads number positive (34)"
    data = b"\xce\x00\x00\x00\x80"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[128]

  :it "reads number positive (35)"
    data = b"\xcf\x00\x00\x00\x00\x00\x00\x00\x80"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[128]

  :it "reads number positive (36)"
    data = b"\xd1\x00\x80"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[128]

  :it "reads number positive (37)"
    data = b"\xd2\x00\x00\x00\x80"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[128]

  :it "reads number positive (38)"
    data = b"\xd3\x00\x00\x00\x00\x00\x00\x00\x80"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[128]

  :it "reads number positive (39)"
    data = b"\xcc\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[255]

  :it "reads number positive (40)"
    data = b"\xcd\x00\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[255]

  :it "reads number positive (41)"
    data = b"\xce\x00\x00\x00\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[255]

  :it "reads number positive (42)"
    data = b"\xcf\x00\x00\x00\x00\x00\x00\x00\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[255]

  :it "reads number positive (43)"
    data = b"\xd1\x00\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[255]

  :it "reads number positive (44)"
    data = b"\xd2\x00\x00\x00\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[255]

  :it "reads number positive (45)"
    data = b"\xd3\x00\x00\x00\x00\x00\x00\x00\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[255]

  :it "reads number positive (46)"
    data = b"\xcd\x01\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[256]

  :it "reads number positive (47)"
    data = b"\xce\x00\x00\x01\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[256]

  :it "reads number positive (48)"
    data = b"\xcf\x00\x00\x00\x00\x00\x00\x01\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[256]

  :it "reads number positive (49)"
    data = b"\xd1\x01\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[256]

  :it "reads number positive (50)"
    data = b"\xd2\x00\x00\x01\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[256]

  :it "reads number positive (51)"
    data = b"\xd3\x00\x00\x00\x00\x00\x00\x01\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[256]

  :it "reads number positive (52)"
    data = b"\xcd\xff\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[65535]

  :it "reads number positive (53)"
    data = b"\xce\x00\x00\xff\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[65535]

  :it "reads number positive (54)"
    data = b"\xcf\x00\x00\x00\x00\x00\x00\xff\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[65535]

  :it "reads number positive (55)"
    data = b"\xd2\x00\x00\xff\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[65535]

  :it "reads number positive (56)"
    data = b"\xd3\x00\x00\x00\x00\x00\x00\xff\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[65535]

  :it "reads number positive (57)"
    data = b"\xce\x00\x01\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[65536]

  :it "reads number positive (58)"
    data = b"\xcf\x00\x00\x00\x00\x00\x01\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[65536]

  :it "reads number positive (59)"
    data = b"\xd2\x00\x01\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[65536]

  :it "reads number positive (60)"
    data = b"\xd3\x00\x00\x00\x00\x00\x01\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[65536]

  :it "reads number positive (61)"
    data = b"\xce\x7f\xff\xff\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[2147483647]

  :it "reads number positive (62)"
    data = b"\xcf\x00\x00\x00\x00\x7f\xff\xff\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[2147483647]

  :it "reads number positive (63)"
    data = b"\xd2\x7f\xff\xff\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[2147483647]

  :it "reads number positive (64)"
    data = b"\xd3\x00\x00\x00\x00\x7f\xff\xff\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[2147483647]

  :it "reads number positive (65)"
    data = b"\xce\x80\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[2147483648]

  :it "reads number positive (66)"
    data = b"\xcf\x00\x00\x00\x00\x80\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[2147483648]

  :it "reads number positive (67)"
    data = b"\xd3\x00\x00\x00\x00\x80\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[2147483648]

  :it "reads number positive (68)"
    data = b"\xca\x4f\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[2147483648]

  :it "reads number positive (69)"
    data = b"\xcb\x41\xe0\x00\x00\x00\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[2147483648]

  :it "reads number positive (70)"
    data = b"\xce\xff\xff\xff\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[4294967295]

  :it "reads number positive (71)"
    data = b"\xcf\x00\x00\x00\x00\xff\xff\xff\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[4294967295]

  :it "reads number positive (72)"
    data = b"\xd3\x00\x00\x00\x00\xff\xff\xff\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[4294967295]

  :it "reads number positive (73)"
    data = b"\xcb\x41\xef\xff\xff\xff\xe0\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[4294967295]

  :it "reads number negative (1)"
    data = b"\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-1]

  :it "reads number negative (2)"
    data = b"\xd0\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-1]

  :it "reads number negative (3)"
    data = b"\xd1\xff\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-1]

  :it "reads number negative (4)"
    data = b"\xd2\xff\xff\xff\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-1]

  :it "reads number negative (5)"
    data = b"\xd3\xff\xff\xff\xff\xff\xff\xff\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-1]

  :it "reads number negative (6)"
    data = b"\xca\xbf\x80\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-1]

  :it "reads number negative (7)"
    data = b"\xcb\xbf\xf0\x00\x00\x00\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-1]

  :it "reads number negative (8)"
    data = b"\xe0"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-32]

  :it "reads number negative (9)"
    data = b"\xd0\xe0"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-32]

  :it "reads number negative (10)"
    data = b"\xd1\xff\xe0"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-32]

  :it "reads number negative (11)"
    data = b"\xd2\xff\xff\xff\xe0"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-32]

  :it "reads number negative (12)"
    data = b"\xd3\xff\xff\xff\xff\xff\xff\xff\xe0"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-32]

  :it "reads number negative (13)"
    data = b"\xca\xc2\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-32]

  :it "reads number negative (14)"
    data = b"\xcb\xc0\x40\x00\x00\x00\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-32]

  :it "reads number negative (15)"
    data = b"\xd0\xdf"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-33]

  :it "reads number negative (16)"
    data = b"\xd1\xff\xdf"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-33]

  :it "reads number negative (17)"
    data = b"\xd2\xff\xff\xff\xdf"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-33]

  :it "reads number negative (18)"
    data = b"\xd3\xff\xff\xff\xff\xff\xff\xff\xdf"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-33]

  :it "reads number negative (19)"
    data = b"\xd0\x80"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-128]

  :it "reads number negative (20)"
    data = b"\xd1\xff\x80"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-128]

  :it "reads number negative (21)"
    data = b"\xd2\xff\xff\xff\x80"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-128]

  :it "reads number negative (22)"
    data = b"\xd3\xff\xff\xff\xff\xff\xff\xff\x80"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-128]

  :it "reads number negative (23)"
    data = b"\xd1\xff\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-256]

  :it "reads number negative (24)"
    data = b"\xd2\xff\xff\xff\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-256]

  :it "reads number negative (25)"
    data = b"\xd3\xff\xff\xff\xff\xff\xff\xff\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-256]

  :it "reads number negative (26)"
    data = b"\xd1\x80\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-32768]

  :it "reads number negative (27)"
    data = b"\xd2\xff\xff\x80\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-32768]

  :it "reads number negative (28)"
    data = b"\xd3\xff\xff\xff\xff\xff\xff\x80\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-32768]

  :it "reads number negative (29)"
    data = b"\xd2\xff\xff\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-65536]

  :it "reads number negative (30)"
    data = b"\xd3\xff\xff\xff\xff\xff\xff\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-65536]

  :it "reads number negative (31)"
    data = b"\xd2\x80\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-2147483648]

  :it "reads number negative (32)"
    data = b"\xd3\xff\xff\xff\xff\x80\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-2147483648]

  :it "reads number negative (33)"
    data = b"\xcb\xc1\xe0\x00\x00\x00\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-2147483648]

  :it "reads number float (1)"
    data = b"\xca\x3f\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_f64! == F64[0.5]

  :it "reads number float (2)"
    data = b"\xcb\x3f\xe0\x00\x00\x00\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_f64! == F64[0.5]

  :it "reads number float (3)"
    data = b"\xca\xbf\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_f64! == F64[-0.5]

  :it "reads number float (4)"
    data = b"\xcb\xbf\xe0\x00\x00\x00\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_f64! == F64[-0.5]

  :it "reads number bignum (1)"
    data = b"\xcf\x00\x00\x00\x01\x00\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[4294967296]

  :it "reads number bignum (2)"
    data = b"\xd3\x00\x00\x00\x01\x00\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[4294967296]

  :it "reads number bignum (3)"
    data = b"\xca\x4f\x80\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[4294967296]

  :it "reads number bignum (4)"
    data = b"\xcb\x41\xf0\x00\x00\x00\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[4294967296]

  :it "reads number bignum (5)"
    data = b"\xd3\xff\xff\xff\xff\x00\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-4294967296]

  :it "reads number bignum (6)"
    data = b"\xcb\xc1\xf0\x00\x00\x00\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-4294967296]

  :it "reads number bignum (7)"
    data = b"\xcf\x00\x01\x00\x00\x00\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[281474976710656]

  :it "reads number bignum (8)"
    data = b"\xd3\x00\x01\x00\x00\x00\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[281474976710656]

  :it "reads number bignum (9)"
    data = b"\xca\x57\x80\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[281474976710656]

  :it "reads number bignum (10)"
    data = b"\xcb\x42\xf0\x00\x00\x00\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[281474976710656]

  :it "reads number bignum (11)"
    data = b"\xd3\xff\xff\x00\x00\x00\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-281474976710656]

  :it "reads number bignum (12)"
    data = b"\xca\xd7\x80\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-281474976710656]

  :it "reads number bignum (13)"
    data = b"\xcb\xc2\xf0\x00\x00\x00\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-281474976710656]

  :it "reads number bignum (14)"
    data = b"\xd3\x7f\xff\xff\xff\xff\xff\xff\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[9223372036854775807]

  :it "reads number bignum (15)"
    data = b"\xcf\x7f\xff\xff\xff\xff\xff\xff\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[9223372036854775807]

  :it "reads number bignum (16)"
    data = b"\xd3\x80\x00\x00\x00\x00\x00\x00\x01"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-9223372036854775807]

  :it "reads number bignum (17)"
    data = b"\xcf\x80\x00\x00\x00\x00\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[9223372036854775808]

  :it "reads number bignum (18)"
    data = b"\xd3\x80\x00\x00\x00\x00\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_int! == I64[-9223372036854775808]

  :it "reads number bignum (19)"
    data = b"\xcf\xff\xff\xff\xff\xff\xff\xff\xff"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_uint! == U64[18446744073709551615]

  :it "reads string ascii (1)"
    data = b"\xa0"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_string! == ""

  :it "reads string ascii (2)"
    data = b"\xd9\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_string! == ""

  :it "reads string ascii (3)"
    data = b"\xda\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_string! == ""

  :it "reads string ascii (4)"
    data = b"\xdb\x00\x00\x00\x00"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_string! == ""

  :it "reads string ascii (5)"
    data = b"\xa1\x61"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_string! == "a"

  :it "reads string ascii (6)"
    data = b"\xd9\x01\x61"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_string! == "a"

  :it "reads string ascii (7)"
    data = b"\xda\x00\x01\x61"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_string! == "a"

  :it "reads string ascii (8)"
    data = b"\xdb\x00\x00\x00\x01\x61"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_string! == "a"

  :it "reads string ascii (9)"
    data = b"\xbf\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x31"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_string! == "1234567890123456789012345678901"

  :it "reads string ascii (10)"
    data = b"\xd9\x1f\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x31"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_string! == "1234567890123456789012345678901"

  :it "reads string ascii (11)"
    data = b"\xda\x00\x1f\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x31"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_string! == "1234567890123456789012345678901"

  :it "reads string ascii (12)"
    data = b"\xd9\x20\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x31\x32"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_string! == "12345678901234567890123456789012"

  :it "reads string ascii (13)"
    data = b"\xda\x00\x20\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x31\x32"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_string! == "12345678901234567890123456789012"

  :it "reads string utf8 (1)"
    data = b"\xb2\xd0\x9a\xd0\xb8\xd1\x80\xd0\xb8\xd0\xbb\xd0\xbb\xd0\xb8\xd1\x86\xd0\xb0"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_string! == "Кириллица"

  :it "reads string utf8 (2)"
    data = b"\xd9\x12\xd0\x9a\xd0\xb8\xd1\x80\xd0\xb8\xd0\xbb\xd0\xbb\xd0\xb8\xd1\x86\xd0\xb0"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_string! == "Кириллица"

  :it "reads string utf8 (3)"
    data = b"\xac\xe3\x81\xb2\xe3\x82\x89\xe3\x81\x8c\xe3\x81\xaa"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_string! == "ひらがな"

  :it "reads string utf8 (4)"
    data = b"\xd9\x0c\xe3\x81\xb2\xe3\x82\x89\xe3\x81\x8c\xe3\x81\xaa"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_string! == "ひらがな"

  :it "reads string utf8 (5)"
    data = b"\xa6\xed\x95\x9c\xea\xb8\x80"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_string! == "한글"

  :it "reads string utf8 (6)"
    data = b"\xd9\x06\xed\x95\x9c\xea\xb8\x80"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_string! == "한글"

  :it "reads string utf8 (7)"
    data = b"\xa6\xe6\xb1\x89\xe5\xad\x97"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_string! == "汉字"

  :it "reads string utf8 (8)"
    data = b"\xd9\x06\xe6\xb1\x89\xe5\xad\x97"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_string! == "汉字"

  :it "reads string utf8 (9)"
    data = b"\xa6\xe6\xbc\xa2\xe5\xad\x97"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_string! == "漢字"

  :it "reads string utf8 (10)"
    data = b"\xd9\x06\xe6\xbc\xa2\xe5\xad\x97"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_string! == "漢字"

  :it "reads string emoji (1)"
    data = b"\xa3\xe2\x9d\xa4"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_string! == "❤"

  :it "reads string emoji (2)"
    data = b"\xd9\x03\xe2\x9d\xa4"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_string! == "❤"

  :it "reads string emoji (3)"
    data = b"\xa4\xf0\x9f\x8d\xba"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_string! == "🍺"

  :it "reads string emoji (4)"
    data = b"\xd9\x04\xf0\x9f\x8d\xba"
    rd   = MessagePack.Reader.new(data)
    assert: rd.read_string! == "🍺"

  :it "reads ext (1)"
    data = b"\xd4\x01\x10"
    rd   = MessagePack.Reader.new(data)
    assert no_error: (
        actual = rd.read_ext!
        assert: actual.first == I8[1]
        assert: actual.second == b"\x10"
    )

  :it "reads ext (2)"
    data = b"\xd5\x02\x20\x21"
    rd   = MessagePack.Reader.new(data)
    assert no_error: (
        actual = rd.read_ext!
        assert: actual.first == I8[2]
        assert: actual.second == b"\x20\x21"
    )

  :it "reads ext (3)"
    data = b"\xd6\x03\x30\x31\x32\x33"
    rd   = MessagePack.Reader.new(data)
    assert no_error: (
        actual = rd.read_ext!
        assert: actual.first == I8[3]
        assert: actual.second == b"\x30\x31\x32\x33"
    )

  :it "reads ext (4)"
    data = b"\xd7\x04\x40\x41\x42\x43\x44\x45\x46\x47"
    rd   = MessagePack.Reader.new(data)
    assert no_error: (
        actual = rd.read_ext!
        assert: actual.first == I8[4]
        assert: actual.second == b"\x40\x41\x42\x43\x44\x45\x46\x47"
    )

  :it "reads ext (5)"
    data = b"\xd8\x05\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
    rd   = MessagePack.Reader.new(data)
    assert no_error: (
        actual = rd.read_ext!
        assert: actual.first == I8[5]
        assert: actual.second == b"\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
    )

  :it "reads ext (6)"
    data = b"\xc7\x00\x06"
    rd   = MessagePack.Reader.new(data)
    assert no_error: (
        actual = rd.read_ext!
        assert: actual.first == I8[6]
        assert: actual.second == b""
    )

  :it "reads ext (7)"
    data = b"\xc8\x00\x00\x06"
    rd   = MessagePack.Reader.new(data)
    assert no_error: (
        actual = rd.read_ext!
        assert: actual.first == I8[6]
        assert: actual.second == b""
    )

  :it "reads ext (8)"
    data = b"\xc9\x00\x00\x00\x00\x06"
    rd   = MessagePack.Reader.new(data)
    assert no_error: (
        actual = rd.read_ext!
        assert: actual.first == I8[6]
        assert: actual.second == b""
    )

  :it "reads ext (9)"
    data = b"\xc7\x03\x07\x70\x71\x72"
    rd   = MessagePack.Reader.new(data)
    assert no_error: (
        actual = rd.read_ext!
        assert: actual.first == I8[7]
        assert: actual.second == b"\x70\x71\x72"
    )

  :it "reads ext (10)"
    data = b"\xc8\x00\x03\x07\x70\x71\x72"
    rd   = MessagePack.Reader.new(data)
    assert no_error: (
        actual = rd.read_ext!
        assert: actual.first == I8[7]
        assert: actual.second == b"\x70\x71\x72"
    )

  :it "reads ext (11)"
    data = b"\xc9\x00\x00\x00\x03\x07\x70\x71\x72"
    rd   = MessagePack.Reader.new(data)
    assert no_error: (
        actual = rd.read_ext!
        assert: actual.first == I8[7]
        assert: actual.second == b"\x70\x71\x72"
    )
