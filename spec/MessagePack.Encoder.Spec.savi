:class MessagePack.Encoder.Spec
  :is Spec
  :const describes: "MessagePack.Encoder"

  :fun non hex(s String) Bytes: _Helper.hexstr_to_bytes(s)

  :it "encodes nil"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_nil!
    assert: wr.bytes == @hex("c0")

  :it "encodes true"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_bool!(True)
    assert: wr.bytes == @hex("c3")

  :it "encodes false"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_bool!(False)
    assert: wr.bytes == @hex("c2")

  :it "encodes positive fixint (0)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_uint!(0)
    assert: wr.bytes == @hex("00")

  :it "encodes positive fixint (127)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_uint!(127)
    assert: wr.bytes == @hex("7f")

  :it "encodes uint 8 (128)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_uint!(128)
    assert: wr.bytes == @hex("cc-80")

  :it "encodes uint 8 (255)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_uint!(255)
    assert: wr.bytes == @hex("cc-ff")

  :it "encodes uint 16 (256)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_uint!(256)
    assert: wr.bytes == @hex("cd-01-00")

  :it "encodes uint 16 (0xDEAD)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_uint!(0xDEAD)
    assert: wr.bytes == @hex("cd-de-ad")

  :it "encodes uint 16 (0xFFFF)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_uint!(0xFFFF)
    assert: wr.bytes == @hex("cd-ff-ff")

  :it "encodes uint 32 (0xFFFF + 1)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_uint!(U64[0xFFFF] + 1)
    assert: wr.bytes == @hex("ce-00-01-00-00")

  :it "encodes uint 32 (0xDEAD_BEEF)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_uint!(0xDEAD_BEEF)
    assert: wr.bytes == @hex("ce-dead-beef")

  :it "encodes uint 32 (0xFFFF_FFFF)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_uint!(0xFFFF_FFFF)
    assert: wr.bytes == @hex("ce-ffff-ffff")

  :it "encodes uint 64 (0xFFFF_FFFF + 1)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_uint!(U64[0xFFFF_FFFF] + 1)
    assert: wr.bytes == @hex("cf-0000-0001-0000-0000")

  :it "encodes uint 64 (0xABCD_DEAD_BEAF_DCBA)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_uint!(0xABCD_DEAD_BEEF_DCBA)
    assert: wr.bytes == @hex("cf-abcd-dead-beef-dcba")

  :it "encodes uint 64 (0xFFFF_FFFF_FFFF_FFFF)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_uint!(0xFFFF_FFFF_FFFF_FFFF)
    assert: wr.bytes == @hex("cf-ffff-ffff-ffff-ffff")

  :it "encodes negative fixint (-1)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_int!(-1)
    assert: wr.bytes == @hex("ff")

  :it "encodes negative fixint (-32)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_int!(-32)
    assert: wr.bytes == @hex("e0")

  :it "encodes int 8 (0)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_int!(0)
    assert: wr.bytes == @hex("d0-00")

  :it "encodes int 8 (-33)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_int!(-33)
    assert: wr.bytes == @hex("d0-df")

  :it "encodes int 8 (-128)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_int!(-128)
    assert: wr.bytes == @hex("d0-80")

  :it "encodes int 8 (127)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_int!(127)
    assert: wr.bytes == @hex("d0-7f")

  :it "encodes int 16 (-129)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_int!(-129)
    assert: wr.bytes == @hex("d1-ff7f")

  :it "encodes int 16 (128)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_int!(128)
    assert: wr.bytes == @hex("d1-00-80")

  :it "encodes int 16 (-32768)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_int!(-32768)
    assert: wr.bytes == @hex("d1-80-00")

  :it "encodes int 16 (32767)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_int!(32767)
    assert: wr.bytes == @hex("d1-7f-ff")

  :it "encodes int 32 (-32769)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_int!(-32769)
    assert: wr.bytes == @hex("d2-ffff-7fff")

  :it "encodes int 32 (32768)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_int!(32768)
    assert: wr.bytes == @hex("d2-0000-8000")

  :it "encodes int 32 (-2147483648)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_int!(-2147483648)
    assert: wr.bytes == @hex("d2-8000-0000")

  :it "encodes int 32 (2147483647)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_int!(2147483647)
    assert: wr.bytes == @hex("d2-7fff-ffff")

  :it "encodes int 64 (-2147483649)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_int!(-2147483649)
    assert: wr.bytes == @hex("d3-ffff-ffff-7fff-ffff")

  :it "encodes int 64 (2147483648)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_int!(2147483648)
    assert: wr.bytes == @hex("d3-0000-0000-8000-0000")

  :it "encodes int 64 (-9223372036854775808)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_int!(-9223372036854775808)
    assert: wr.bytes == @hex("d3-8000-0000-0000-0000")

  :it "encodes int 64 (9223372036854775807)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_int!(9223372036854775807)
    assert: wr.bytes == @hex("d3-7fff-ffff-ffff-ffff")

  :it "encodes float 32"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_f32!(F32[3.1415])
    assert: wr.bytes == @hex("ca-40-49-0e-56")

  :it "encodes float 64"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_f64!(F64[3.1415])
    assert: wr.bytes == @hex("cb-40-09-21-ca-c0-83-12-6f")

  :it "encodes fixstr ahead (0)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_string_ahead!(0)
    assert: wr.bytes == @hex("a0")

  :it "encodes fixstr ahead (31)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_string_ahead!(31)
    assert: wr.bytes == @hex("bf")

  :it "encodes str 8 ahead (32)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_string_ahead!(32)
    assert: wr.bytes == @hex("d9-20")

  :it "encodes str 8 ahead (255)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_string_ahead!(255)
    assert: wr.bytes == @hex("d9-ff")

  :it "encodes str 16 ahead (256)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_string_ahead!(256)
    assert: wr.bytes == @hex("da-01-00")

  :it "encodes str 16 ahead (0xDEAD)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_string_ahead!(0xDEAD)
    assert: wr.bytes == @hex("da-de-ad")

  :it "encodes str 16 ahead (65535)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_string_ahead!(65535)
    assert: wr.bytes == @hex("da-ff-ff")

  :it "encodes str 32 ahead (65536)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_string_ahead!(65536)
    assert: wr.bytes == @hex("db-00-01-00-00")

  :it "encodes str 32 ahead (0xDEADBEEF)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_string_ahead!(0xDEADBEEF)
    assert: wr.bytes == @hex("db-dead-beef")

  :it "encodes str 32 ahead (4294967295)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_string_ahead!(4294967295)
    assert: wr.bytes == @hex("db-ff-ff-ff-ff")

  :it "encodes bin 8 ahead (0)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_binary_ahead!(0)
    assert: wr.bytes == @hex("c4-00")

  :it "encodes bin 8 ahead (255)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_binary_ahead!(255)
    assert: wr.bytes == @hex("c4-ff")

  :it "encodes bin 16 ahead (256)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_binary_ahead!(256)
    assert: wr.bytes == @hex("c5-01-00")

  :it "encodes bin 16 ahead (0xDEAD)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_binary_ahead!(0xDEAD)
    assert: wr.bytes == @hex("c5-de-ad")

  :it "encodes bin 16 ahead (65535)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_binary_ahead!(65535)
    assert: wr.bytes == @hex("c5-ff-ff")

  :it "encodes bin 32 ahead (65536)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_binary_ahead!(65536)
    assert: wr.bytes == @hex("c6-00-01-00-00")

  :it "encodes bin 32 ahead (0xDEADBEEF)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_binary_ahead!(0xDEADBEEF)
    assert: wr.bytes == @hex("c6-dead-beef")

  :it "encodes bin 32 ahead (4294967295)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_binary_ahead!(4294967295)
    assert: wr.bytes == @hex("c6-ff-ff-ff-ff")


  :it "encodes fixarray ahead (0)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_array_ahead!(0)
    assert: wr.bytes == @hex("90")

  :it "encodes fixarray ahead (15)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_array_ahead!(15)
    assert: wr.bytes == @hex("9f")

  :it "encodes array 16 ahead (16)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_array_ahead!(16)
    assert: wr.bytes == @hex("dc-00-10")

  :it "encodes array 16 ahead (255)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_array_ahead!(255)
    assert: wr.bytes == @hex("dc-00-ff")

  :it "encodes array 16 ahead (256)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_array_ahead!(256)
    assert: wr.bytes == @hex("dc-01-00")

  :it "encodes array 16 ahead (0xDEAD)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_array_ahead!(0xDEAD)
    assert: wr.bytes == @hex("dc-dead")

  :it "encodes array 16 ahead (0xFFFF)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_array_ahead!(0xFFFF)
    assert: wr.bytes == @hex("dc-ffff")

  :it "encodes array 32 ahead (0xFFFF + 1)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_array_ahead!(U32[0xFFFF] + 1)
    assert: wr.bytes == @hex("dd-0001-0000")

  :it "encodes array 32 ahead (0xDEAD_BEEF)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_array_ahead!(0xDEAD_BEEF)
    assert: wr.bytes == @hex("dd-dead-beef")

  :it "encodes array 32 ahead (0xFFFF_FFFF)"
    wr = MessagePack.Encoder.new
    assert no_error: wr.encode_array_ahead!(0xFFFF_FFFF)
    assert: wr.bytes == @hex("dd-ffff-ffff")

